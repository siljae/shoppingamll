@startuml
title 구매 API 시퀀스 다이어그램

actor 사용자 as User
participant "ApiProductController" as Controller
participant "ProductService" as ProductService
participant "ProductMapper" as ProductMapper
participant "OrderService" as OrderService
participant "OrderMapper" as OrderMapper
database "Database" as DB

User -> Controller : POST /api/products/{productId}/purchase(request)
activate Controller

Controller -> ProductService : reduceStock(request)
activate ProductService

note right of ProductService : 상품 조회 트랜잭션 시작
    ProductService -> ProductMapper : getProductById(productId)
    activate ProductMapper
        ProductMapper -> DB : getProductById(id)
        activate DB
        DB --> ProductMapper : Product
        deactivate DB
    ProductMapper --> ProductService : Product
    deactivate ProductMapper

    opt 상품 조회 실패
    ProductService --> Controller : ProductNotFoundException
    end
    opt 재고 부족
    ProductService --> Controller : OutOfStockException
    end

    ProductService -> ProductService : product.setStock(stock - request.quantity)
    ProductService -> ProductMapper : updateProductStock(product)
    activate ProductMapper
        ProductMapper -> DB : updateProduct(product)
        activate DB
        DB --> ProductMapper : void
        deactivate DB
    ProductMapper --> ProductService : void
    deactivate ProductMapper
note right of ProductService : 상품 조회 트랜잭션 종료

Controller -> OrderService : addOrder(productId)
activate OrderService

note right of OrderService : 주문 추가 트랜잭션 시작
    OrderService -> OrderMapper : insertOrder(order)
    activate OrderMapper

        OrderMapper -> DB : insertOrder(order)
        activate DB
        DB --> OrderMapper : void
        deactivate DB
    OrderMapper --> OrderService : void
    deactivate OrderMapper

    opt 주문 추가 실패
    OrderService --> Controller : OrderNotFoundException
    note right of OrderService : 예외 발생으로 인한 트랜잭션 종료
    Controller -> ProductService : restoreStock(ProductId, quantity)
    note right of ProductService : 재고 복원 트랜잭션 시작
    activate ProductService
        ProductService -> ProductMapper : getProductById(productId)
        activate ProductMapper
            ProductMapper -> DB : getProductById(id)
            activate DB
            DB --> ProductMapper : Product
            deactivate DB
        ProductMapper --> ProductService : Product
        deactivate ProductMapper
        opt 상품 조회 실패
        ProductService --> Controller : ProductNotFoundException
        end
        opt 복구 수량 부족
        ProductService --> Controller : IllegalArgumentException
        end
        ProductService -> ProductService : product.setStock(stock + request.quantity)
            ProductService -> ProductMapper : updateProductStock(product)
            activate ProductMapper
                ProductMapper -> DB : updateProductStock(product)
                activate DB
                DB --> ProductMapper : void
                deactivate DB
            ProductMapper --> ProductService : void
            deactivate ProductMapper
    note right of ProductService : 재고 복원 트랜잭션 종료
    end
OrderService --> Controller : void
deactivate OrderService
note right of OrderService : 주문 추가 트랜잭션 종료

Controller --> User : 구매가 완료되었습니다.
deactivate Controller

@enduml