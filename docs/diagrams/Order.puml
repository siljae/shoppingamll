@startuml
title 구매 API 시퀀스 다이어그램

actor 사용자 as User
participant "ApiProductController" as Controller
participant "PurchaseService" as PurchaseService
participant "ProductStockRedisService" as ProductStockRedisService
participant "ProductMapper" as ProductMapper
database  "Redis" as RedissonClient
participant "OrderService" as OrderService
participant "OrderMapper" as OrderMapper


User -> Controller : POST /api/products/{productId}/purchase(request)
activate Controller


Controller -> PurchaseService : purchase(productId)
activate PurchaseService

note right : 트랜잭션 시작
PurchaseService -> ProductStockRedisService : reduceStock(productId, 1)
activate ProductStockRedisService

ProductStockRedisService -> ProductMapper : getProductStockById(productId)
activate ProductMapper
ProductMapper --> ProductStockRedisService : maxStock
deactivate ProductMapper



ProductStockRedisService -> RedissonClient : getAtomicLong(productSaleKey)
activate RedissonClient
RedissonClient --> ProductStockRedisService : currentSaleCount
deactivate RedissonClient

opt (currentSaleCount + quantity) > maxStock
ProductStockRedisService --> Controller : OutOfStockException
end

ProductStockRedisService -> RedissonClient : getAtomicLong(productSaleKey).addAndGet(quantity)
activate RedissonClient
RedissonClient --> ProductStockRedisService : currentSale
deactivate RedissonClient

opt currentSale > maxStock
ProductStockRedisService -> RedissonClient : rProductSale.addAndGet(-quantity)
ProductStockRedisService --> Controller : OutOfStockException
end

ProductStockRedisService --> PurchaseService
deactivate ProductStockRedisService

PurchaseService -> OrderService : makeOrder(productId)
activate OrderService
OrderService -> OrderMapper : insertOrder(order)
activate OrderMapper
OrderMapper --> OrderService
deactivate OrderMapper
OrderService --> PurchaseService : Order
deactivate OrderService

PurchaseService --> Controller : Order
deactivate PurchaseService
note right : 트랜잭션 종료

Controller --> User : 구매가 완료되었습니다.
deactivate Controller

@enduml